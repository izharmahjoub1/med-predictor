<?php

/**
 * Script de test d'int√©gration du Dataset - 50 Joueurs Tunisie 2024-2025
 * Teste la compatibilit√© avec la plateforme FIT
 */

echo "üß™ TEST D'INT√âGRATION DU DATASET - 50 JOUEURS TUNISIE 2024-2025\n";
echo "================================================================\n\n";

// Charger le dataset
$dataset = json_decode(file_get_contents('dataset-50-joueurs-tunisie-2024-2025.json'), true);

if (!$dataset) {
    echo "‚ùå ERREUR : Impossible de charger le fichier JSON\n";
    exit(1);
}

echo "‚úÖ Dataset charg√© : " . count($dataset['joueurs']) . " joueurs\n\n";

// Test 1: V√©rification de la structure des donn√©es
echo "üîç TEST 1: V√âRIFICATION DE LA STRUCTURE\n";
echo "----------------------------------------\n";

$structureOK = true;
$requiredFields = [
    'id', 'nom', 'prenom', 'age', 'nationalite', 'poste', 'club',
    'pillar_1_health', 'pillar_2_performance', 'pillar_3_sdoh',
    'pillar_4_market_value', 'pillar_5_adherence_availability',
    'fit_score_calcul'
];

foreach ($dataset['joueurs'] as $index => $joueur) {
    foreach ($requiredFields as $field) {
        if (!isset($joueur[$field])) {
            echo "‚ùå Joueur " . ($index + 1) . " : Champ manquant '{$field}'\n";
            $structureOK = false;
        }
    }
}

if ($structureOK) {
    echo "‚úÖ Structure des donn√©es valide\n";
} else {
    echo "‚ùå Structure des donn√©es invalide\n";
}

echo "\n";

// Test 2: V√©rification des FIT Scores
echo "üéØ TEST 2: V√âRIFICATION DES FIT SCORES\n";
echo "---------------------------------------\n";

$fitScoresOK = true;
$fitScores = [];

foreach ($dataset['joueurs'] as $index => $joueur) {
    $fitScore = $joueur['fit_score_calcul']['fit_score_final'];
    $fitScores[] = $fitScore;
    
    // V√©rifier que le score est dans une plage raisonnable
    if ($fitScore < 0 || $fitScore > 100) {
        echo "‚ùå Joueur " . ($index + 1) . " : FIT Score invalide ({$fitScore})\n";
        $fitScoresOK = false;
    }
    
    // V√©rifier la coh√©rence avec la cat√©gorie
    $categorie = $joueur['fit_score_calcul']['categorie'];
    $categorieOK = false;
    
    if ($fitScore >= 90 && $categorie === 'Excellent') $categorieOK = true;
    elseif ($fitScore >= 80 && $categorie === 'Tr√®s bon') $categorieOK = true;
    elseif ($fitScore >= 70 && $categorie === 'Bon') $categorieOK = true;
    elseif ($fitScore >= 60 && $categorie === 'Moyen') $categorieOK = true;
    elseif ($fitScore < 60 && $categorie === 'Faible') $categorieOK = true;
    
    if (!$categorieOK) {
        echo "‚ùå Joueur " . ($index + 1) . " : Cat√©gorie incoh√©rente (Score: {$fitScore}, Cat√©gorie: {$categorie})\n";
        $fitScoresOK = false;
    }
}

if ($fitScoresOK) {
    echo "‚úÖ FIT Scores valides et coh√©rents\n";
    echo "   Plage : " . min($fitScores) . " - " . max($fitScores) . "\n";
    echo "   Moyenne : " . round(array_sum($fitScores) / count($fitScores), 2) . "\n";
} else {
    echo "‚ùå FIT Scores invalides ou incoh√©rents\n";
}

echo "\n";

// Test 3: V√©rification des donn√©es de sant√©
echo "üè• TEST 3: V√âRIFICATION DES DONN√âES DE SANT√â\n";
echo "---------------------------------------------\n";

$healthOK = true;
$blessuresTotal = 0;
$pcmaOK = 0;

foreach ($dataset['joueurs'] as $index => $joueur) {
    $health = $joueur['pillar_1_health'];
    
    // V√©rifier les blessures
    if (isset($health['historique_blessures'])) {
        $blessuresTotal += count($health['historique_blessures']);
        
        foreach ($health['historique_blessures'] as $blessure) {
            if (!isset($blessure['type']) || !isset($blessure['duree_indisponibilite'])) {
                echo "‚ùå Joueur " . ($index + 1) . " : Blessure mal format√©e\n";
                $healthOK = false;
            }
        }
    }
    
    // V√©rifier le PCMA
    if (isset($health['statut_pcma'])) {
        if ($health['statut_pcma'] === 'Clearance OK') {
            $pcmaOK++;
        }
    } else {
        echo "‚ùå Joueur " . ($index + 1) . " : Statut PCMA manquant\n";
        $healthOK = false;
    }
}

if ($healthOK) {
    echo "‚úÖ Donn√©es de sant√© valides\n";
    echo "   Blessures totales : {$blessuresTotal}\n";
    echo "   PCMA OK : {$pcmaOK}/" . count($dataset['joueurs']) . "\n";
} else {
    echo "‚ùå Donn√©es de sant√© invalides\n";
}

echo "\n";

// Test 4: V√©rification des performances
echo "‚öΩ TEST 4: V√âRIFICATION DES PERFORMANCES\n";
echo "-----------------------------------------\n";

$performanceOK = true;

foreach ($dataset['joueurs'] as $index => $joueur) {
    $performance = $joueur['pillar_2_performance'];
    
    if (!isset($performance['stats_saison_precedente']['minutes_jouees']) ||
        !isset($performance['donnees_physiques']['vitesse_maximale'])) {
        echo "‚ùå Joueur " . ($index + 1) . " : Donn√©es de performance manquantes\n";
        $performanceOK = false;
    }
}

if ($performanceOK) {
    echo "‚úÖ Donn√©es de performance valides\n";
} else {
    echo "‚ùå Donn√©es de performance invalides\n";
}

echo "\n";

// Test 5: V√©rification des valeurs marchandes
echo "üí∞ TEST 5: V√âRIFICATION DES VALEURS MARCHANDES\n";
echo "----------------------------------------------\n";

$marketValueOK = true;
$valeurs = [];

foreach ($dataset['joueurs'] as $index => $joueur) {
    $marketValue = $joueur['pillar_4_market_value'];
    
    if (!isset($marketValue['valeur_marchande']) || $marketValue['valeur_marchande'] <= 0) {
        echo "‚ùå Joueur " . ($index + 1) . " : Valeur marchande invalide\n";
        $marketValueOK = false;
    } else {
        $valeurs[] = $marketValue['valeur_marchande'];
    }
}

if ($marketValueOK) {
    echo "‚úÖ Valeurs marchandes valides\n";
    echo "   Plage : " . number_format(min($valeurs), 0, ',', ' ') . " ‚Ç¨ - " . number_format(max($valeurs), 0, ',', ' ') . " ‚Ç¨\n";
    echo "   Moyenne : " . number_format(array_sum($valeurs) / count($valeurs), 0, ',', ' ') . " ‚Ç¨\n";
} else {
    echo "‚ùå Valeurs marchandes invalides\n";
}

echo "\n";

// Test 6: V√©rification de l'adh√©rence
echo "‚úÖ TEST 6: V√âRIFICATION DE L'ADH√âRENCE\n";
echo "--------------------------------------\n";

$adherenceOK = true;
$presenceTotal = 0;

foreach ($dataset['joueurs'] as $index => $joueur) {
    $adherence = $joueur['pillar_5_adherence_availability'];
    
    if (!isset($adherence['taux_presence_entrainements']) ||
        !isset($adherence['disponibilite_generale'])) {
        echo "‚ùå Joueur " . ($index + 1) . " : Donn√©es d'adh√©rence manquantes\n";
        $adherenceOK = false;
    } else {
        $presenceTotal += $adherence['taux_presence_entrainements'];
    }
}

if ($adherenceOK) {
    echo "‚úÖ Donn√©es d'adh√©rence valides\n";
    echo "   Pr√©sence moyenne : " . round($presenceTotal / count($dataset['joueurs']), 1) . "%\n";
} else {
    echo "‚ùå Donn√©es d'adh√©rence invalides\n";
}

echo "\n";

// Test 7: V√©rification de la coh√©rence globale
echo "üîç TEST 7: V√âRIFICATION DE LA COH√âRENCE GLOBALE\n";
echo "-----------------------------------------------\n";

$coherenceOK = true;

foreach ($dataset['joueurs'] as $index => $joueur) {
    // V√©rifier que l'√¢ge est coh√©rent avec la date de naissance
    $ageCalcule = date('Y') - date('Y', strtotime($joueur['date_naissance']));
    if (abs($ageCalcule - $joueur['age']) > 1) {
        echo "‚ùå Joueur " . ($index + 1) . " : √Çge incoh√©rent (calcul√©: {$ageCalcule}, d√©clar√©: {$joueur['age']})\n";
        $coherenceOK = false;
    }
    
    // V√©rifier que le FIT Score est coh√©rent avec les sous-scores
    $fitScoreCalcule = round(($joueur['fit_score_calcul']['health_score'] + 
                              $joueur['fit_score_calcul']['performance_score'] + 
                              $joueur['fit_score_calcul']['sdoh_score'] + 
                              $joueur['fit_score_calcul']['market_value_score'] + 
                              $joueur['fit_score_calcul']['adherence_score']) / 5, 1);
    
    if (abs($fitScoreCalcule - $joueur['fit_score_calcul']['fit_score_final']) > 0.1) {
        echo "‚ùå Joueur " . ($index + 1) . " : FIT Score incoh√©rent (calcul√©: {$fitScoreCalcule}, d√©clar√©: {$joueur['fit_score_calcul']['fit_score_final']})\n";
        $coherenceOK = false;
    }
}

if ($coherenceOK) {
    echo "‚úÖ Coh√©rence globale valid√©e\n";
} else {
    echo "‚ùå Incoh√©rences d√©tect√©es\n";
}

echo "\n";

// R√©sum√© final
echo "üìä R√âSUM√â DES TESTS\n";
echo "===================\n";

$tests = [
    'Structure des donn√©es' => $structureOK,
    'FIT Scores' => $fitScoresOK,
    'Donn√©es de sant√©' => $healthOK,
    'Performances' => $performanceOK,
    'Valeurs marchandes' => $marketValueOK,
    'Adh√©rence' => $adherenceOK,
    'Coh√©rence globale' => $coherenceOK
];

$testsReussis = 0;
foreach ($tests as $test => $resultat) {
    $status = $resultat ? "‚úÖ" : "‚ùå";
    echo "{$status} {$test}\n";
    if ($resultat) $testsReussis++;
}

echo "\n";

if ($testsReussis === count($tests)) {
    echo "üéâ TOUS LES TESTS SONT PASS√âS !\n";
    echo "Le dataset est pr√™t pour l'int√©gration avec la plateforme FIT.\n";
} else {
    echo "‚ö†Ô∏è {$testsReussis}/" . count($tests) . " tests sont pass√©s.\n";
    echo "V√©rifiez les erreurs avant l'int√©gration.\n";
}

echo "\n";
echo "üìà STATISTIQUES FINALES\n";
echo "------------------------\n";
echo "Nombre total de joueurs : " . count($dataset['joueurs']) . "\n";
echo "FIT Score moyen : " . round(array_sum($fitScores) / count($fitScores), 2) . "\n";
echo "FIT Score min : " . min($fitScores) . "\n";
echo "FIT Score max : " . max($fitScores) . "\n";
echo "Blessures totales : {$blessuresTotal}\n";
echo "PCMA OK : {$pcmaOK}/" . count($dataset['joueurs']) . " (" . round(($pcmaOK / count($dataset['joueurs'])) * 100, 1) . "%)\n";
echo "Valeur marchande moyenne : " . number_format(array_sum($valeurs) / count($valeurs), 0, ',', ' ') . " ‚Ç¨\n";
echo "Pr√©sence moyenne : " . round($presenceTotal / count($dataset['joueurs']), 1) . "%\n";




