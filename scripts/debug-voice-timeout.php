<?php
/**
 * Debug Voice Timeout - Probl√®me d'arr√™t apr√®s 2 secondes
 */

echo "=== Debug Voice Timeout - Probl√®me d'Arr√™t apr√®s 2 Secondes ===\n\n";

echo "‚è±Ô∏è  **PROBL√àME** : Le bouton s'arr√™te toujours apr√®s 2 secondes\n\n";

echo "üîç **DIAGNOSTIC APPROFONDI** :\n\n";

// Test de la page
$testUrl = 'http://localhost:8080/test-pcma-simple';
echo "1. Test de la page : $testUrl\n";

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $testUrl);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_TIMEOUT, 10);
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
curl_setopt($ch, CURLOPT_MAXREDIRS, 5);

$response = curl_exec($ch);
$httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
curl_close($ch);

if ($httpCode == 200) {
    echo "   ‚úÖ Page accessible (HTTP $httpCode)\n";
    
    // V√©rifier la pr√©sence de setTimeout ou setInterval
    echo "\n2. V√©rification des timers potentiels :\n";
    
    $timers = [
        'setTimeout.*2000' => 'Timeout de 2 secondes',
        'setTimeout.*2\\*1000' => 'Timeout de 2 secondes (calcul√©)',
        'setInterval.*2000' => 'Interval de 2 secondes',
        'setTimeout' => 'setTimeout pr√©sent',
        'setInterval' => 'setInterval pr√©sent'
    ];
    
    foreach ($timers as $timer => $description) {
        if (preg_match('/' . $timer . '/', $response)) {
            echo "   ‚ö†Ô∏è  $description : TROUV√â\n";
        } else {
            echo "   ‚úÖ $description : NON TROUV√â\n";
        }
    }
    
    // V√©rifier la pr√©sence de stopVoiceRecognition automatique
    echo "\n3. V√©rification de l'arr√™t automatique :\n";
    
    $autoStop = [
        'stopVoiceRecognition.*setTimeout' => 'Arr√™t automatique avec setTimeout',
        'recognition\\.stop.*setTimeout' => 'Arr√™t reconnaissance avec setTimeout',
        'setTimeout.*stopVoiceRecognition' => 'Timeout vers stopVoiceRecognition',
        'setTimeout.*recognition\\.stop' => 'Timeout vers recognition.stop'
    ];
    
    foreach ($autoStop as $pattern => $description) {
        if (preg_match('/' . $pattern . '/', $response)) {
            echo "   ‚ö†Ô∏è  $description : TROUV√â\n";
        } else {
            echo "   ‚úÖ $description : NON TROUV√â\n";
        }
    }
    
    // V√©rifier la configuration de reconnaissance vocale
    echo "\n4. Configuration reconnaissance vocale :\n";
    
    $recognitionConfig = [
        'continuous.*true' => 'Mode continu activ√©',
        'continuous.*false' => 'Mode continu d√©sactiv√©',
        'interimResults.*false' => 'R√©sultats interm√©diaires d√©sactiv√©s',
        'maxAlternatives.*1' => 'Alternatives limit√©es',
        'lang.*fr' => 'Langue fran√ßaise'
    ];
    
    foreach ($recognitionConfig as $config => $description) {
        if (preg_match('/' . $config . '/', $response)) {
            echo "   ‚úÖ $description : TROUV√â\n";
        } else {
            echo "   ‚ùå $description : NON TROUV√â\n";
        }
    }
    
    // V√©rifier les gestionnaires d'√©v√©nements de reconnaissance
    echo "\n5. Gestionnaires d'√©v√©nements de reconnaissance :\n";
    
    $recognitionEvents = [
        'recognition\\.onstart' => '√âv√©nement onstart',
        'recognition\\.onend' => '√âv√©nement onend',
        'recognition\\.onerror' => '√âv√©nement onerror',
        'recognition\\.onresult' => '√âv√©nement onresult',
        'recognition\\.onspeechend' => '√âv√©nement onspeechend'
    ];
    
    foreach ($recognitionEvents as $event => $description) {
        if (preg_match('/' . $event . '/', $response)) {
            echo "   ‚úÖ $description : TROUV√â\n";
        } else {
            echo "   ‚ùå $description : NON TROUV√â\n";
        }
    }
    
    // Chercher des patterns de probl√®me sp√©cifiques
    echo "\n6. Patterns de probl√®me potentiels :\n";
    
    $problemPatterns = [
        'recognition\\.stop\\(\\)' => 'Appel √† recognition.stop()',
        'stopVoiceRecognition\\(\\)' => 'Appel √† stopVoiceRecognition()',
        'isListening.*false' => 'Mise √† false de isListening',
        'recognition\\.abort' => 'Abort de la reconnaissance',
        'setTimeout.*function' => 'setTimeout avec fonction'
    ];
    
    foreach ($problemPatterns as $pattern => $description) {
        if (preg_match('/' . $pattern . '/', $response)) {
            echo "   ‚ö†Ô∏è  $description : TROUV√â\n";
        } else {
            echo "   ‚úÖ $description : NON TROUV√â\n";
        }
    }
    
    // Afficher un extrait du JavaScript pour analyse
    echo "\n7. Extrait du JavaScript de reconnaissance :\n";
    
    $jsStart = strpos($response, 'webkitSpeechRecognition');
    if ($jsStart !== false) {
        $jsEnd = strpos($response, '</script>', $jsStart);
        if ($jsEnd === false) {
            $jsEnd = strpos($response, 'function', $jsStart + 1);
        }
        
        if ($jsEnd !== false) {
            $jsCode = substr($response, $jsStart, $jsEnd - $jsStart);
            echo "   üìù Code reconnaissance vocale :\n";
            echo "      " . substr($jsCode, 0, 400) . "...\n";
        }
    }
    
    // Chercher des indices de timeout cach√©
    echo "\n8. Recherche de timeout cach√©s :\n";
    
    $hiddenTimeouts = [
        '2000' => 'Valeur 2000 (2 secondes)',
        '2\\*1000' => 'Calcul 2*1000',
        '2e3' => 'Notation scientifique 2e3',
        '2000ms' => '2000 millisecondes',
        '2s' => '2 secondes'
    ];
    
    foreach ($hiddenTimeouts as $timeout => $description) {
        if (preg_match('/' . $timeout . '/', $response)) {
            echo "   ‚ö†Ô∏è  $description : TROUV√â\n";
        } else {
            echo "   ‚úÖ $description : NON TROUV√â\n";
        }
    }
    
} else {
    echo "   ‚ùå Page inaccessible (HTTP $httpCode)\n";
}

echo "\n=== DIAGNOSTIC DU TIMEOUT ===\n";
echo "üîç **Causes possibles du timeout de 2 secondes** :\n";
echo "1. ‚è±Ô∏è  setTimeout cach√© dans le code JavaScript\n";
echo "2. ‚è±Ô∏è  Configuration de reconnaissance vocale incorrecte\n";
echo "3. ‚è±Ô∏è  √âv√©nement onend qui arr√™te automatiquement\n";
echo "4. ‚è±Ô∏è  √âv√©nement onspeechend qui arr√™te la reconnaissance\n";
echo "5. ‚è±Ô∏è  Gestionnaire d'erreur qui arr√™te la reconnaissance\n";
echo "6. ‚è±Ô∏è  Conflit avec d'autres composants JavaScript\n\n";

echo "üìã **Solutions √† essayer** :\n";
echo "1. üîç V√©rifier la console du navigateur (F12) pour les erreurs\n";
echo "2. ‚è±Ô∏è  Chercher des setTimeout dans le code JavaScript\n";
echo "3. üé§ V√©rifier la configuration de reconnaissance vocale\n";
echo "4. üö´ D√©sactiver les √©v√©nements onend et onspeechend\n";
echo "5. üîÑ Forcer le mode continu de la reconnaissance\n";
echo "6. üßπ Nettoyer le code JavaScript\n\n";

echo "üéØ **Test imm√©diat** :\n";
echo "1. Aller sur http://localhost:8080/test-pcma-simple\n";
echo "2. Ouvrir la console (F12)\n";
echo "3. Cliquer sur 'Commencer l\'examen PCMA'\n";
echo "4. Regarder les messages dans la console\n";
echo "5. Chercher des erreurs ou des timeouts\n\n";

echo "üö® **Erreurs courantes** :\n";
echo "- 'onend' ‚Üí La reconnaissance s'arr√™te automatiquement\n";
echo "- 'onspeechend' ‚Üí Arr√™t apr√®s fin de parole\n";
echo "- 'setTimeout' ‚Üí Timeout programm√©\n";
echo "- 'continuous: false' ‚Üí Mode non continu\n\n";

echo "üéâ **Objectif** : Identifier et √©liminer le timeout de 2 secondes !\n";
?>

