#!/usr/bin/env node

/**
 * ‚öΩ Script de mise √† jour des logos des f√©d√©rations nationales pour FIT
 * üìÖ Cr√©√© le : 15 ao√ªt 2025
 * üéØ Objectif : T√©l√©charger les logos officiels des f√©d√©rations nationales depuis l'API-Football
 * 
 * Ce script t√©l√©charge les logos des f√©d√©rations nationales (pas des ligues)
 * en utilisant l'endpoint /teams avec type=national
 */

import axios from 'axios';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Obtenir le chemin du r√©pertoire actuel en ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Configuration
const CONFIG = {
    API_URL: 'https://v3.football.api-sports.io/teams',
    API_KEY: 'c0c639720c2ce705387a758a71876dda',
    OUTPUT_DIR: path.join(__dirname, '../public/associations'),
    TIMEOUT: 30000, // 30 seconds
    DELAY_BETWEEN_REQUESTS: 1000, // 1 second between requests
    MAX_RETRIES: 3
};

// Mappage des codes pays vers les noms de f√©d√©rations
const FEDERATION_MAPPING = {
    'MA': 'F√©d√©ration Royale Marocaine de Football',
    'TN': 'F√©d√©ration Tunisienne de Football', 
    'DZ': 'F√©d√©ration Alg√©rienne de Football',
    'SN': 'F√©d√©ration S√©n√©galaise de Football',
    'ML': 'F√©d√©ration Malienne de Football',
    'CI': 'F√©d√©ration Ivoirienne de Football',
    'NG': 'F√©d√©ration Nig√©riane de Football',
    'GH': 'F√©d√©ration Ghan√©enne de Football',
    'CM': 'F√©d√©ration Camerounaise de Football',
    'EG': 'F√©d√©ration √âgyptienne de Football',
    'FR': 'F√©d√©ration Fran√ßaise de Football',
    'GB-ENG': 'The Football Association',
    'DE': 'Deutscher Fu√üball-Bund',
    'ES': 'Real Federaci√≥n Espa√±ola de F√∫tbol',
    'IT': 'Federazione Italiana Giuoco Calcio',
    'PT': 'Federa√ß√£o Portuguesa de Futebol',
    'NL': 'Koninklijke Nederlandse Voetbalbond',
    'BE': 'Union Royale Belge des Soci√©t√©s de Football',
    'CH': 'Swiss Football Association',
    'AT': '√ñsterreichischer Fu√üball-Bund',
    'SE': 'Svenska Fotbollf√∂rbundet',
    'NO': 'Norges Fotballforbund',
    'DK': 'Dansk Boldspil-Union',
    'FI': 'Suomen Palloliitto',
    'PL': 'Polski ZwiƒÖzek Pi≈Çki No≈ºnej',
    'CZ': 'Fotbalov√° asociace ƒåesk√© republiky',
    'HU': 'Magyar Labdar√∫g√≥ Sz√∂vets√©g',
    'RO': 'Federa»õia Rom√¢nƒÉ de Fotbal',
    'BG': 'Bulgarian Football Union',
    'HR': 'Hrvatski nogometni savez',
    'RS': 'Fudbalski savez Srbije',
    'SI': 'Nogometna zveza Slovenije',
    'SK': 'Slovensk√Ω futbalov√Ω zv√§z',
    'LT': 'Lietuvos futbolo federacija',
    'LV': 'Latvijas Futbola federƒÅcija',
    'EE': 'Eesti Jalgpalli Liit',
    'IS': 'Knattspyrnusamband √çslands',
    'IE': 'Football Association of Ireland',
    'GB-WLS': 'Football Association of Wales',
    'GB-SCT': 'Scottish Football Association',
    'GB-NIR': 'Irish Football Association'
};

// Logging avec timestamp
function log(message, type = 'INFO') {
    const timestamp = new Date().toISOString();
    const prefix = type === 'ERROR' ? '‚ùå' : type === 'SUCCESS' ? '‚úÖ' : type === 'WARNING' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
    console.log(`[${timestamp}] ${prefix} ${message}`);
}

// Cr√©er le r√©pertoire de sortie s'il n'existe pas
function ensureOutputDirectory() {
    if (!fs.existsSync(CONFIG.OUTPUT_DIR)) {
        fs.mkdirSync(CONFIG.OUTPUT_DIR, { recursive: true });
        log(`R√©pertoire cr√©√© : ${CONFIG.OUTPUT_DIR}`);
    }
}

// T√©l√©charger un logo
async function downloadLogo(url, filepath, retries = 0) {
    try {
        const response = await axios({
            method: 'GET',
            url: url,
            responseType: 'stream',
            timeout: CONFIG.TIMEOUT,
            headers: {
                'x-apisports-key': CONFIG.API_KEY
            }
        });

        const writer = fs.createWriteStream(filepath);
        response.data.pipe(writer);

        return new Promise((resolve, reject) => {
            writer.on('finish', () => {
                const stats = fs.statSync(filepath);
                log(`Logo t√©l√©charg√© : ${path.basename(filepath)} (${(stats.size / 1024).toFixed(1)} KB)`);
                resolve();
            });
            writer.on('error', reject);
        });

    } catch (error) {
        if (retries < CONFIG.MAX_RETRIES) {
            log(`Tentative ${retries + 1} √©chou√©e pour ${path.basename(filepath)}, nouvelle tentative...`, 'WARNING');
            await new Promise(resolve => setTimeout(resolve, CONFIG.DELAY_BETWEEN_REQUESTS));
            return downloadLogo(url, filepath, retries + 1);
        }
        
        log(`√âchec du t√©l√©chargement de ${path.basename(filepath)} apr√®s ${CONFIG.MAX_RETRIES} tentatives: ${error.message}`, 'ERROR');
        throw error;
    }
}

// Traiter une f√©d√©ration nationale
async function processNationalFederation(countryCode, federationName) {
    try {
        log(`Recherche de la f√©d√©ration : ${federationName} (${countryCode})`);
        
        // Rechercher l'√©quipe nationale
        const response = await axios({
            method: 'GET',
            url: CONFIG.API_URL,
            params: {
                country: countryCode,
                type: 'national'
            },
            headers: {
                'x-apisports-key': CONFIG.API_KEY
            },
            timeout: CONFIG.TIMEOUT
        });

        if (response.data && response.data.response && response.data.response.length > 0) {
            const team = response.data.response[0];
            
            if (team.team && team.team.logo) {
                const logoUrl = team.team.logo;
                const outputPath = path.join(CONFIG.OUTPUT_DIR, `${countryCode}.png`);
                
                log(`Logo trouv√© pour ${federationName}: ${logoUrl}`);
                await downloadLogo(logoUrl, outputPath);
                return true;
            } else {
                log(`Aucun logo trouv√© pour ${federationName}`, 'WARNING');
                return false;
            }
        } else {
            log(`Aucune √©quipe nationale trouv√©e pour ${countryCode}`, 'WARNING');
            return false;
        }

    } catch (error) {
        log(`Erreur lors du traitement de ${federationName} (${countryCode}): ${error.message}`, 'ERROR');
        return false;
    }
}

// Fonction principale
async function main() {
    try {
        log('üöÄ D√©marrage de la mise √† jour des logos des f√©d√©rations nationales...');
        
        ensureOutputDirectory();
        
        const results = {
            success: 0,
            failed: 0,
            total: Object.keys(FEDERATION_MAPPING).length
        };

        log(`üìä Traitement de ${results.total} f√©d√©rations nationales...`);

        // Traiter chaque f√©d√©ration
        for (const [countryCode, federationName] of Object.entries(FEDERATION_MAPPING)) {
            try {
                const success = await processNationalFederation(countryCode, federationName);
                
                if (success) {
                    results.success++;
                } else {
                    results.failed++;
                }

                // D√©lai entre les requ√™tes pour √©viter la limitation de l'API
                if (results.success + results.failed < results.total) {
                    await new Promise(resolve => setTimeout(resolve, CONFIG.DELAY_BETWEEN_REQUESTS));
                }

            } catch (error) {
                results.failed++;
                log(`Erreur critique pour ${federationName}: ${error.message}`, 'ERROR');
            }
        }

        // R√©sum√© final
        log('üèÅ Mise √† jour termin√©e !', 'SUCCESS');
        log(`üìà R√©sultats : ${results.success} succ√®s, ${results.failed} √©checs sur ${results.total} f√©d√©rations`);
        
        if (results.success > 0) {
            log(`‚úÖ Logos t√©l√©charg√©s dans : ${CONFIG.OUTPUT_DIR}`);
        }
        
        if (results.failed > 0) {
            log(`‚ö†Ô∏è ${results.failed} f√©d√©rations n'ont pas pu √™tre trait√©es`, 'WARNING');
        }

    } catch (error) {
        log(`‚ùå Erreur fatale : ${error.message}`, 'ERROR');
        process.exit(1);
    }
}

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (reason, promise) => {
    log(`Promesse rejet√©e non g√©r√©e : ${reason}`, 'ERROR');
    process.exit(1);
});

process.on('uncaughtException', (error) => {
    log(`Exception non captur√©e : ${error.message}`, 'ERROR');
    process.exit(1);
});

// Ex√©cuter le script
main();
