/**
 * üé§ ServiceVocal.js - Service de reconnaissance vocale robuste
 * Int√©gration directe avec le flux de transcription pour formulaires m√©dicaux
 * Compatible FIT (VueJS + Tailwind + NodeJS backend)
 */

class ServiceVocal {
    constructor() {
        this.recognition = null;
        this.isListening = false;
        this.isInitialized = false;
        this.onTranscriptCallback = null;
        this.onErrorCallback = null;
        this.onStartCallback = null;
        this.onStopCallback = null;
        this.interimResults = [];
        this.finalResults = [];
        this.confidence = 0;
        this.language = 'fr-FR';
        this.maxAlternatives = 3;
        
        console.log('üé§ ServiceVocal initialis√©');
    }

    /**
     * üîß Initialiser le service de reconnaissance vocale
     */
    async initialize() {
        try {
            // V√©rifier la disponibilit√© de l'API
            if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {
                throw new Error('API de reconnaissance vocale non support√©e par ce navigateur');
            }

            // Cr√©er l'instance de reconnaissance
            const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
            this.recognition = new SpeechRecognition();

            // Configuration avanc√©e
            this.recognition.continuous = true;           // Reconnaissance continue
            this.recognition.interimResults = true;       // R√©sultats interm√©diaires
            this.recognition.maxAlternatives = this.maxAlternatives;
            this.recognition.lang = this.language;

            // üîß NOUVEAU : Configuration pour la reconnaissance m√©dicale
            this.recognition.grammars = this.createMedicalGrammar();

            // Configuration des √©v√©nements
            this.setupEventHandlers();

            this.isInitialized = true;
            console.log('‚úÖ ServiceVocal initialis√© avec succ√®s');
            
            return true;

        } catch (error) {
            console.error('‚ùå Erreur lors de l\'initialisation de ServiceVocal:', error);
            this.onErrorCallback?.(error);
            return false;
        }
    }

    /**
     * üîß Cr√©er une grammaire m√©dicale pour am√©liorer la reconnaissance
     */
    createMedicalGrammar() {
        try {
            // Cr√©er une grammaire JSGF pour les termes m√©dicaux
            const medicalGrammar = new SpeechGrammarList();
            
            // Grammaire pour les diagnostics courants
            const diagnosticGrammar = `
                #JSGF V1.0;
                grammar diagnostics;
                public <diagnostic> = 
                    entorse | fracture | luxation | contusion | ecchymose |
                    tendinite | bursite | arthrite | arthrose | hernie |
                    sciatique | lombalgie | cervicalgie | c√©phal√©e | migraine |
                    hypertension | diab√®te | asthme | bronchite | pneumonie |
                    infarctus | angine | arythmie | insuffisance | insuffisance cardiaque |
                    insuffisance r√©nale | insuffisance h√©patique | cirrhose | h√©patite |
                    ulc√®re | gastrite | colite | appendicite | p√©ritonite |
                    tumeur | cancer | m√©tastase | r√©mission | r√©cidive;
            `;
            
            medicalGrammar.addFromString(diagnosticGrammar, 1.0);
            
            return medicalGrammar;
            
        } catch (error) {
            console.warn('‚ö†Ô∏è Grammaire m√©dicale non support√©e, utilisation de la reconnaissance standard');
            return null;
        }
    }

    /**
     * üîß Configuration des gestionnaires d'√©v√©nements
     */
    setupEventHandlers() {
        if (!this.recognition) return;

        // üéØ R√©sultats interm√©diaires (en temps r√©el)
        this.recognition.onresult = (event) => {
            console.log('üéØ R√©sultats vocaux re√ßus:', event.results);
            
            let interimTranscript = '';
            let finalTranscript = '';
            let maxConfidence = 0;

            // Traiter tous les r√©sultats
            for (let i = event.resultIndex; i < event.results.length; i++) {
                const transcript = event.results[i][0].transcript;
                const confidence = event.results[i][0].confidence;
                const isFinal = event.results[i].isFinal;

                if (isFinal) {
                    finalTranscript += transcript;
                    this.finalResults.push({
                        transcript,
                        confidence,
                        timestamp: Date.now()
                    });
                } else {
                    interimTranscript += transcript;
                    this.interimResults.push({
                        transcript,
                        confidence,
                        timestamp: Date.now()
                    });
                }

                maxConfidence = Math.max(maxConfidence, confidence);
            }

            this.confidence = maxConfidence;

            // üîß NOUVEAU : D√©clencher le callback onTranscript en temps r√©el
            if (this.onTranscriptCallback) {
                this.onTranscriptCallback({
                    transcript: finalTranscript || interimTranscript,
                    confidence: this.confidence,
                    isFinal: finalTranscript.length > 0,
                    interim: interimTranscript,
                    final: finalTranscript,
                    allResults: event.results
                });
            }

            console.log('üìù Transcription:', {
                interim: interimTranscript,
                final: finalTranscript,
                confidence: this.confidence,
                isFinal: finalTranscript.length > 0
            });
        };

        // üéØ D√©marrage de la reconnaissance
        this.recognition.onstart = () => {
            this.isListening = true;
            console.log('üé§ Reconnaissance vocale d√©marr√©e');
            this.onStartCallback?.();
        };

        // üéØ Arr√™t de la reconnaissance
        this.recognition.onend = () => {
            this.isListening = false;
            console.log('‚è∏Ô∏è Reconnaissance vocale arr√™t√©e');
            this.onStopCallback?.();
        };

        // üéØ Erreurs
        this.recognition.onerror = (event) => {
            console.error('‚ùå Erreur de reconnaissance vocale:', event.error);
            this.isListening = false;
            this.onErrorCallback?.(event.error);
        };

        // üéØ Pas de parole d√©tect√©e
        this.recognition.onspeechend = () => {
            console.log('üîá Fin de parole d√©tect√©e');
        };

        // üéØ Audio d√©tect√©
        this.recognition.onaudiostart = () => {
            console.log('üîä Audio d√©tect√©');
        };

        // üéØ Fin d'audio
        this.recognition.onaudioend = () => {
            console.log('üîá Fin d\'audio');
        };

        // üéØ Pas de parole
        this.recognition.onnomatch = () => {
            console.log('üîá Aucune correspondance trouv√©e');
        };
    }

    /**
     * üé§ D√©marrer la reconnaissance vocale
     */
    startListening() {
        if (!this.isInitialized) {
            console.error('‚ùå ServiceVocal non initialis√©');
            return false;
        }

        if (this.isListening) {
            console.warn('‚ö†Ô∏è Reconnaissance vocale d√©j√† en cours');
            return false;
        }

        try {
            this.recognition.start();
            console.log('üé§ D√©marrage de la reconnaissance vocale...');
            return true;
        } catch (error) {
            console.error('‚ùå Erreur lors du d√©marrage:', error);
            this.onErrorCallback?.(error);
            return false;
        }
    }

    /**
     * ‚è∏Ô∏è Arr√™ter la reconnaissance vocale
     */
    stopListening() {
        if (!this.isInitialized || !this.isListening) {
            console.warn('‚ö†Ô∏è Reconnaissance vocale non en cours');
            return false;
        }

        try {
            this.recognition.stop();
            console.log('‚è∏Ô∏è Arr√™t de la reconnaissance vocale...');
            return true;
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'arr√™t:', error);
            this.onErrorCallback?.(error);
            return false;
        }
    }

    /**
     * üîß D√©finir le callback de transcription
     */
    onTranscript(callback) {
        this.onTranscriptCallback = callback;
        console.log('‚úÖ Callback onTranscript configur√©');
    }

    /**
     * üîß D√©finir le callback d'erreur
     */
    onError(callback) {
        this.onErrorCallback = callback;
        console.log('‚úÖ Callback onError configur√©');
    }

    /**
     * üîß D√©finir le callback de d√©marrage
     */
    onStart(callback) {
        this.onStartCallback = callback;
        console.log('‚úÖ Callback onStart configur√©');
    }

    /**
     * üîß D√©finir le callback d'arr√™t
     */
    onStop(callback) {
        this.onStopCallback = callback;
        console.log('‚úÖ Callback onStop configur√©');
    }

    /**
     * üîß Changer la langue
     */
    setLanguage(language) {
        if (this.recognition) {
            this.recognition.lang = language;
            this.language = language;
            console.log(`üåç Langue chang√©e vers: ${language}`);
        }
    }

    /**
     * üîß Obtenir le statut actuel
     */
    getStatus() {
        return {
            isInitialized: this.isInitialized,
            isListening: this.isListening,
            confidence: this.confidence,
            language: this.language,
            interimResults: this.interimResults.length,
            finalResults: this.finalResults.length
        };
    }

    /**
     * üîß R√©initialiser les r√©sultats
     */
    resetResults() {
        this.interimResults = [];
        this.finalResults = [];
        this.confidence = 0;
        console.log('üîÑ R√©sultats r√©initialis√©s');
    }

    /**
     * üîß Obtenir les derniers r√©sultats
     */
    getLatestResults() {
        return {
            interim: this.interimResults.slice(-5),  // 5 derniers r√©sultats interm√©diaires
            final: this.finalResults.slice(-5),      // 5 derniers r√©sultats finaux
            confidence: this.confidence
        };
    }

    /**
     * üîß Nettoyer les ressources
     */
    destroy() {
        if (this.recognition) {
            this.recognition.stop();
            this.recognition = null;
        }
        
        this.isListening = false;
        this.isInitialized = false;
        this.onTranscriptCallback = null;
        this.onErrorCallback = null;
        this.onStartCallback = null;
        this.onStopCallback = null;
        
        console.log('üóëÔ∏è ServiceVocal d√©truit');
    }
}

// üîß Export pour utilisation dans d'autres modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = ServiceVocal;
} else if (typeof window !== 'undefined') {
    window.ServiceVocal = ServiceVocal;
}

console.log('‚úÖ ServiceVocal.js charg√© avec succ√®s');

