name: CI/CD Pipeline - Med Predictor

on:
  push:
    branches: [ develop-v3, feature/*, testing/* ]
  pull_request:
    branches: [ develop-v3, main ]

jobs:
  # Tests et qualité du code
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: med_predictor_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, gd, zip
        coverage: xdebug
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
    
    - name: Copy .env
      run: cp .env.example .env
    
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-interaction
    
    - name: Install NPM dependencies
      run: npm ci
    
    - name: Generate app key
      run: php artisan key:generate
    
    - name: Create database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -ppassword -e "CREATE DATABASE IF NOT EXISTS med_predictor_test;"
    
    - name: Run migrations
      run: php artisan migrate --env=testing
    
    - name: Run seeders
      run: php artisan db:seed --env=testing
    
    - name: Run tests
      run: php artisan test --coverage-clover=coverage.xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  # Analyse de la qualité du code
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, gd, zip
    
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-interaction
    
    - name: Run PHP CS Fixer
      run: ./vendor/bin/php-cs-fixer fix --dry-run --diff
    
    - name: Run PHPStan
      run: ./vendor/bin/phpstan analyse --level=8
    
    - name: Run PHP Mess Detector
      run: ./vendor/bin/phpmd app text cleancode,codesize,controversial,design,naming,unusedcode

  # Tests de navigateur (Laravel Dusk)
  browser-tests:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: med_predictor_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, gd, zip
    
    - name: Install Composer dependencies
      run: composer install --prefer-dist --no-interaction
    
    - name: Copy .env
      run: cp .env.example .env
    
    - name: Generate app key
      run: php artisan key:generate
    
    - name: Create database
      run: |
        mysql -h 127.0.0.1 -P 3306 -u root -ppassword -e "CREATE DATABASE IF NOT EXISTS med_predictor_test;"
    
    - name: Run migrations
      run: php artisan migrate --env=testing
    
    - name: Run seeders
      run: php artisan db:seed --env=testing
    
    - name: Install Chrome
      run: |
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
    
    - name: Run Dusk tests
      run: php artisan dusk --env=testing

  # Build et déploiement (uniquement sur develop-v3)
  deploy:
    needs: [test, code-quality, browser-tests]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop-v3'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '16'
        cache: 'npm'
    
    - name: Install NPM dependencies
      run: npm ci
    
    - name: Build assets
      run: npm run build
    
    - name: Create deployment package
      run: |
        tar -czf med-predictor-$(date +%Y%m%d-%H%M%S).tar.gz \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='vendor' \
          --exclude='storage/logs/*' \
          --exclude='storage/framework/cache/*' \
          .
    
    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: med-predictor-deployment
        path: med-predictor-*.tar.gz

  # Notification Slack (optionnel)
  notify:
    needs: [test, code-quality, browser-tests]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#ci-cd'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
