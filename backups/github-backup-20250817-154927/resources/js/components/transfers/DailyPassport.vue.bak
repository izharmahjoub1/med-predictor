<template>
  <div class="bg-white rounded-lg shadow-md">
    <!-- Header -->
    <div class="p-6 border-b border-gray-200">
      <div class="flex items-center justify-between">
        <div>
          <h2 class="text-2xl font-bold text-gray-900">Passeport du Jour</h2>
          <p class="text-gray-600">{{ formatDate(today) }} - Statuts des joueurs et transferts</p>
        </div>
        <div class="flex space-x-2">
          <button
            @click="refreshData"
            :disabled="loading"
            class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
          >
            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Actualiser
          </button>
        </div>
      </div>
    </div>

    <!-- Statistiques -->
    <div class="p-6 border-b border-gray-200">
      <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div class="bg-blue-50 p-4 rounded-lg">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <svg class="h-8 w-8 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-blue-600">Joueurs Éligibles</p>
              <p class="text-2xl font-semibold text-blue-900">{{ stats.eligiblePlayers }}</p>
            </div>
          </div>
        </div>

        <div class="bg-green-50 p-4 rounded-lg">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <svg class="h-8 w-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-green-600">Transferts Approuvés</p>
              <p class="text-2xl font-semibold text-green-900">{{ stats.approvedTransfers }}</p>
            </div>
          </div>
        </div>

        <div class="bg-yellow-50 p-4 rounded-lg">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <svg class="h-8 w-8 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-yellow-600">ITC En Attente</p>
              <p class="text-2xl font-semibold text-yellow-900">{{ stats.pendingItc }}</p>
            </div>
          </div>
        </div>

        <div class="bg-red-50 p-4 rounded-lg">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <svg class="h-8 w-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-red-600">Alertes</p>
              <p class="text-2xl font-semibold text-red-900">{{ stats.alerts }}</p>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Onglets -->
    <div class="border-b border-gray-200">
      <nav class="-mb-px flex space-x-8 px-6">
        <button
          v-for="tab in tabs"
          :key="tab.id"
          @click="activeTab = tab.id"
          :class="[
            activeTab === tab.id
              ? 'border-blue-500 text-blue-600'
              : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300',
            'whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm'
          ]"
        >
          {{ tab.name }}
        </button>
      </nav>
    </div>

    <!-- Contenu des onglets -->
    <div class="p-6">
      <!-- Onglet Club -->
      <div v-if="activeTab === 'club'" class="space-y-6">
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-medium text-gray-900">Joueurs Éligibles - {{ selectedClub?.name }}</h3>
          <select
            v-model="selectedClubId"
            class="border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">Sélectionner un club</option>
            <option v-for="club in clubs" :key="club.id" :value="club.id">{{ club.name }}</option>
          </select>
        </div>

        <div v-if="selectedClub" class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Joueur</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Position</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut Licence</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ITC</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Suspensions</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Éligible</th>
              </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
              <tr v-for="player in clubPlayers" :key="player.id" class="hover:bg-gray-50">
                <td class="px-6 py-4 whitespace-nowrap">
                  <div class="flex items-center">
                    <div class="flex-shrink-0 h-10 w-10">
                      <img v-if="player.photo_url" :src="player.photo_url" class="h-10 w-10 rounded-full" />
                      <div v-else class="h-10 w-10 rounded-full bg-gray-300 flex items-center justify-center">
                        <span class="text-gray-600 font-medium">{{ player.name.charAt(0) }}</span>
                      </div>
                    </div>
                    <div class="ml-4">
                      <div class="text-sm font-medium text-gray-900">{{ player.name }}</div>
                      <div class="text-sm text-gray-500">{{ player.nationality }}</div>
                    </div>
                  </div>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{{ player.position }}</td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full"
                        :class="getLicenseStatusClass(player.fifa_license_status)">
                    {{ getLicenseStatusLabel(player.fifa_license_status) }}
                  </span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span v-if="player.is_international" class="text-sm text-gray-900">
                    {{ player.itc_status || 'Non requis' }}
                  </span>
                  <span v-else class="text-gray-400 text-sm">Non requis</span>
                </td>
                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {{ player.suspensions_count || 0 }}
                </td>
                <td class="px-6 py-4 whitespace-nowrap">
                  <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full"
                        :class="player.is_eligible ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'">
                    {{ player.is_eligible ? 'Oui' : 'Non' }}
                  </span>
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </div>

      <!-- Onglet Fédération -->
      <div v-if="activeTab === 'federation'" class="space-y-6">
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-medium text-gray-900">Synthèse des Transferts - {{ selectedFederation?.name }}</h3>
          <select
            v-model="selectedFederationId"
            class="border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">Sélectionner une fédération</option>
            <option v-for="federation in federations" :key="federation.id" :value="federation.id">{{ federation.name }}</option>
          </select>
        </div>

        <div v-if="selectedFederation" class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <!-- Transferts récents -->
          <div class="bg-gray-50 p-4 rounded-lg">
            <h4 class="text-sm font-medium text-gray-900 mb-3">Transferts Récents</h4>
            <div class="space-y-2">
              <div v-for="transfer in federationTransfers" :key="transfer.id" class="text-sm">
                <div class="flex justify-between">
                  <span class="font-medium">{{ transfer.player.name }}</span>
                  <span :class="getStatusClass(transfer.transfer_status)">
                    {{ getStatusLabel(transfer.transfer_status) }}
                  </span>
                </div>
                <div class="text-gray-500 text-xs">
                  {{ transfer.club_origin.name }} → {{ transfer.club_destination.name }}
                </div>
              </div>
            </div>
          </div>

          <!-- Alertes réglementaires -->
          <div class="bg-red-50 p-4 rounded-lg">
            <h4 class="text-sm font-medium text-red-900 mb-3">Alertes Réglementaires</h4>
            <div class="space-y-2">
              <div v-for="alert in federationAlerts" :key="alert.id" class="text-sm text-red-700">
                <div class="flex items-start">
                  <svg class="h-4 w-4 text-red-500 mr-2 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                  </svg>
                  <span>{{ alert.message }}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Onglet Joueur -->
      <div v-if="activeTab === 'player'" class="space-y-6">
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-medium text-gray-900">Historique des Transferts - {{ selectedPlayer?.name }}</h3>
          <select
            v-model="selectedPlayerId"
            class="border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="">Sélectionner un joueur</option>
            <option v-for="player in players" :key="player.id" :value="player.id">{{ player.name }}</option>
          </select>
        </div>

        <div v-if="selectedPlayer" class="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <!-- Informations du joueur -->
          <div class="bg-gray-50 p-4 rounded-lg">
            <h4 class="text-sm font-medium text-gray-900 mb-3">Informations</h4>
            <div class="space-y-2 text-sm">
              <div><span class="font-medium">Nom:</span> {{ selectedPlayer.name }}</div>
              <div><span class="font-medium">Position:</span> {{ selectedPlayer.position }}</div>
              <div><span class="font-medium">Nationalité:</span> {{ selectedPlayer.nationality }}</div>
              <div><span class="font-medium">Club actuel:</span> {{ selectedPlayer.current_club?.name }}</div>
              <div><span class="font-medium">Statut licence:</span> 
                <span :class="getLicenseStatusClass(selectedPlayer.fifa_license_status)">
                  {{ getLicenseStatusLabel(selectedPlayer.fifa_license_status) }}
                </span>
              </div>
            </div>
          </div>

          <!-- Historique des transferts -->
          <div class="lg:col-span-2 bg-gray-50 p-4 rounded-lg">
            <h4 class="text-sm font-medium text-gray-900 mb-3">Historique des Transferts</h4>
            <div class="space-y-3">
              <div v-for="transfer in playerTransfers" :key="transfer.id" class="border-l-4 border-blue-500 pl-4">
                <div class="flex justify-between items-start">
                  <div>
                    <div class="font-medium">{{ transfer.club_origin.name }} → {{ transfer.club_destination.name }}</div>
                    <div class="text-sm text-gray-500">{{ formatDate(transfer.transfer_date) }}</div>
                  </div>
                  <span :class="getStatusClass(transfer.transfer_status)">
                    {{ getStatusLabel(transfer.transfer_status) }}
                  </span>
                </div>
                <div class="text-sm text-gray-600 mt-1">
                  Type: {{ getTransferTypeLabel(transfer.transfer_type) }} | 
                  Montant: {{ transfer.transfer_fee ? formatCurrency(transfer.transfer_fee, transfer.currency) : 'Gratuit' }}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, reactive, computed, onMounted, watch } from 'vue'

export default {
  name: 'DailyPassport',
  setup() {
    const loading = ref(false)
    const today = ref(new Date())
    const activeTab = ref('club')
    
    const selectedClubId = ref('')
    const selectedFederationId = ref('')
    const selectedPlayerId = ref('')
    
    const clubs = ref([])
    const federations = ref([])
    const players = ref([])
    const clubPlayers = ref([])
    const federationTransfers = ref([])
    const federationAlerts = ref([])
    const playerTransfers = ref([])
    
    const stats = reactive({
      eligiblePlayers: 0,
      approvedTransfers: 0,
      pendingItc: 0,
      alerts: 0
    })

    const tabs = [
      { id: 'club', name: 'Club' },
      { id: 'federation', name: 'Fédération' },
      { id: 'player', name: 'Joueur' }
    ]

    const selectedClub = computed(() => 
      clubs.value.find(c => c.id == selectedClubId.value)
    )

    const selectedFederation = computed(() => 
      federations.value.find(f => f.id == selectedFederationId.value)
    )

    const selectedPlayer = computed(() => 
      players.value.find(p => p.id == selectedPlayerId.value)
    )

    const loadData = async () => {
      loading.value = true
      try {
        // Charger les données de base
        await Promise.all([
          loadClubs(),
          loadFederations(),
          loadPlayers(),
          loadStats()
        ])

        // Charger les données spécifiques selon l'onglet actif
        if (activeTab.value === 'club' && selectedClubId.value) {
          await loadClubPlayers()
        } else if (activeTab.value === 'federation' && selectedFederationId.value) {
          await loadFederationData()
        } else if (activeTab.value === 'player' && selectedPlayerId.value) {
          await loadPlayerData()
        }
      } catch (error) {
        console.error('Error loading data:', error)
      } finally {
        loading.value = false
      }
    }

    const loadClubs = async () => {
      const response = await fetch('/api/clubs')
      const data = await response.json()
      if (data.success) {
        clubs.value = data.data
      }
    }

    const loadFederations = async () => {
      const response = await fetch('/api/federations')
      const data = await response.json()
      if (data.success) {
        federations.value = data.data
      }
    }

    const loadPlayers = async () => {
      const response = await fetch('/api/players')
      const data = await response.json()
      if (data.success) {
        players.value = data.data
      }
    }

    const loadStats = async () => {
      const response = await fetch('/api/transfers/statistics')
      const data = await response.json()
      if (data.success) {
        Object.assign(stats, data.data)
      }
    }

    const loadClubPlayers = async () => {
      if (!selectedClubId.value) return
      
      const response = await fetch(`/api/clubs/${selectedClubId.value}/players/daily-passport`)
      const data = await response.json()
      if (data.success) {
        clubPlayers.value = data.data
      }
    }

    const loadFederationData = async () => {
      if (!selectedFederationId.value) return
      
      const response = await fetch(`/api/federations/${selectedFederationId.value}/daily-passport`)
      const data = await response.json()
      if (data.success) {
        federationTransfers.value = data.data.transfers
        federationAlerts.value = data.data.alerts
      }
    }

    const loadPlayerData = async () => {
      if (!selectedPlayerId.value) return
      
      const response = await fetch(`/api/players/${selectedPlayerId.value}/transfers`)
      const data = await response.json()
      if (data.success) {
        playerTransfers.value = data.data
      }
    }

    const refreshData = () => {
      loadData()
    }

    // Watchers
    watch(selectedClubId, () => {
      if (activeTab.value === 'club') {
        loadClubPlayers()
      }
    })

    watch(selectedFederationId, () => {
      if (activeTab.value === 'federation') {
        loadFederationData()
      }
    })

    watch(selectedPlayerId, () => {
      if (activeTab.value === 'player') {
        loadPlayerData()
      }
    })

    watch(activeTab, () => {
      loadData()
    })

    // Utilitaires
    const formatDate = (date) => {
      return new Date(date).toLocaleDateString('fr-FR')
    }

    const formatCurrency = (amount, currency) => {
      return new Intl.NumberFormat('fr-FR', {
        style: 'currency',
        currency: currency || 'EUR'
      }).format(amount)
    }

    const getLicenseStatusLabel = (status) => {
      const labels = {
        active: 'Active',
        suspended: 'Suspendue',
        expired: 'Expirée',
        revoked: 'Révoquée',
        pending: 'En attente'
      }
      return labels[status] || status
    }

    const getLicenseStatusClass = (status) => {
      const classes = {
        active: 'bg-green-100 text-green-800',
        suspended: 'bg-red-100 text-red-800',
        expired: 'bg-yellow-100 text-yellow-800',
        revoked: 'bg-red-100 text-red-800',
        pending: 'bg-blue-100 text-blue-800'
      }
      return classes[status] || 'bg-gray-100 text-gray-800'
    }

    const getStatusLabel = (status) => {
      const labels = {
        draft: 'Brouillon',
        pending: 'En attente',
        submitted: 'Soumis',
        approved: 'Approuvé',
        rejected: 'Rejeté'
      }
      return labels[status] || status
    }

    const getStatusClass = (status) => {
      const classes = {
        draft: 'bg-gray-100 text-gray-800',
        pending: 'bg-yellow-100 text-yellow-800',
        submitted: 'bg-blue-100 text-blue-800',
        approved: 'bg-green-100 text-green-800',
        rejected: 'bg-red-100 text-red-800'
      }
      return classes[status] || 'bg-gray-100 text-gray-800'
    }

    const getTransferTypeLabel = (type) => {
      const labels = {
        permanent: 'Définitif',
        loan: 'Prêt',
        free_agent: 'Agent libre'
      }
      return labels[type] || type
    }

    onMounted(() => {
      loadData()
    })

    return {
      loading,
      today,
      activeTab,
      selectedClubId,
      selectedFederationId,
      selectedPlayerId,
      clubs,
      federations,
      players,
      clubPlayers,
      federationTransfers,
      federationAlerts,
      playerTransfers,
      stats,
      tabs,
      selectedClub,
      selectedFederation,
      selectedPlayer,
      loadData,
      refreshData,
      formatDate,
      formatCurrency,
      getLicenseStatusLabel,
      getLicenseStatusClass,
      getStatusLabel,
      getStatusClass,
      getTransferTypeLabel
    }
  }
}
</script> 